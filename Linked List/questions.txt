1. Given N. Create a Linked List
    1 -> 2 -> 3 -> ... -> N
    Note: Maintain Head and Tail - Done
    TC (N) and SC - (N)
2. Give a Linked List - Calculate size of Linked Linked (Count of Node) - Also cover traverse Linked List question - Done
    TC (N) and SC (1)
3. Print elements of Linked List - Done
4. Give a Linked Linked. Find data at kth element. (0 index based) - Done
    TC (min(N, k)) and SC (1)
5. Given a Linked List. Given k and x. Have to insert x at kth position. (0 based index)
    TC (min(N, k)) and SC (1)
6. Give a Linked List. Delete a node at kth index. (0 based index)
    TC (min(N, k)) and SC (1)
7. Given a Linked List. Reverse this Linked List
    TC (N) and SC (1)
8. Find middle element of given Linked List
    TC (N) and SC (1)
    - Find Length of Linked Lis
    - Find the (N-1)/2th element of Linked List
    - Use signle Loop with Slow and Fast Pointers
    - fast.next is not None and fast.next.next is not None
      - if fast.next is None then odd
      - if fast.next is not None then even
9. Two soted linked list. Merge in single sorted linked list without new linked list
10. 

1. Given N. Create a Linked List
    1 -> 2 -> 3 -> ... -> N
    Note: Maintain Head and Tail - Done
    TC (N) and SC - (N)
2. Give a Linked List - Calculate size of Linked Linked (Count of Node) - Also cover traverse Linked List question - Done
    TC (N) and SC (1)
3. Print elements of Linked List - Done
4. Give a Linked Linked. Find data at kth element. (0 index based) - Done
    TC (min(N, k)) and SC (1)
5. Given a Linked List. Given k and x. Have to insert x at kth position. (0 based index)
    TC (min(N, k)) and SC (1)
6. Give a Linked List. Delete a node at kth index. (0 based index)
    TC (min(N, k)) and SC (1)
7. Given a Linked List. Reverse this Linked List
    TC (N) and SC (1)
8. Find middle element of given Linked List
    TC (N) and SC (1)
    - Find Length of Linked Lis
    - Find the (N-1)/2th element of Linked List
    - Use signle Loop with Slow and Fast Pointers
    - fast.next is not None and fast.next.next is not None
      - if fast.next is None then odd
      - if fast.next is not None then even
9. Two soted linked list. Merge in single sorted linked list without new linked list
10. Sort Linked List (Merge Sort)
    TC (NlogN) and SC (logN)
11. Given a Linked List. Detect a cycle.
    Solution1 - Use dictionary with store address
    TC (N) SC (N)
    Solution2 - Slow and Fast Pointers - Example v and 2v velocity with distance diff d
    TC (N) SC (1)
12. Given a Linked List with a cycle. Find the Loop Node
    Solution1 - Use dictionary with store address
    TC (N) SC (N)
    Solution2 - Slow and Fast Pointers 
        - Find first match for slow and fast
        - take two more point one at head and second at meet point
        - go one by one and then meet point will be loop point
    TC (N) SC (1)
13. Given a Doubly Linked List. Check it is palindrom or not
    TC (N) SC(1)
14. Given a DLL and Give a Node. Insert a new Node before it.
15. Given a DLL and Give a Node. Delete that.
16. LRU Cache using DLL and HasMap - Important
17. Given a Linked List. Every Node has 2 pointers. 1 next and 1 random. Clone the Linked List - Important
18. Given a Linked List. Check it is palindrom or not.
19. Given a Linked Lis. Reorder it.
20. Given a 2D Linked List. Flatten it to a Sorted Singly Linked Lis (SSL).
    - every sublist also sorted
21. Given a Y-shaped Linked List. Find intersection Node.
    - Solve find circular linked list point of circle.
22. Given a Linked List. Find the length of longest odd len palindrom sub Linked List.
23. Reverse a Linked List in Groups
   - Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).
   - Input:
        LinkedList: 1->2->2->4->5->6->7->8
        K = 4
        Output: 4 2 2 1 8 7 6 5 
        Explanation: 
        The first 4 elements 1,2,2,4 are reversed first 
        and then the next 4 elements 5,6,7,8. Hence, the 
        resultant linked list is 4->2->2->1->8->7->6->5.
    - Input:
        LinkedList: 1->2->3->4->5
        K = 3
        Output: 3 2 1 5 4 
        Explanation: 
        The first 3 elements are 1,2,3 are reversed 
        first and then elements 4,5 are reversed.Hence, 
        the resultant linked list is 3->2->1->5->4.
    - Expected Time Complexity : O(N)
        Expected Auxilliary Space : O(1)
24. Convert singly linked list into circular linked list
    - Given a singly linked list, we have to convert it into circular linked list. For example, we have been given a singly linked list with four nodes and we want to convert this singly linked list into circular linked list.
25. Add two numbers represented by Linked List
    - Given two numbers represented by two lists, write a function that returns the sum in the form of a linked list.
    - Input: 
        List1: 5->6->3 // represents number 563 
        List2: 8->4->2 // represents number 842 
        Output: 
        Resultant list: 1->4->0->5 // represents number 1405 
        Explanation: 563 + 842 = 1405

        Input: 
        List1: 7->5->9->4->6 // represents number 75946
        List2: 8->4 // represents number 84
        Output: 
        Resultant list: 7->6->0->3->0// represents number 76030
        Explanation: 75946+84=76030
26. Swap Kth node from beginning with Kth node from end in a Linked List
    - Given a singly linked list, swap kth node from beginning with kth node from end. Swapping of data is not allowed, only pointers should be changed. This requirement may be logical in many situations where the linked list data part is huge (For example student details like Name, RollNo, Address, ..etc). The pointers are always fixed (4 bytes for most of the compilers)
    - Input: 5 -> 10 -> 8 -> 5 -> 9 -> 3, K = 2
        Output: 5 -> 9 -> 8 -> 5 -> 10 -> 3 
        Explanation: The 2nd node from 1st is 10 and 2nd node from last is 9, so swap them.

        Input: 1 -> 2 -> 3 -> 4 -> 5, K = 5
        Output: 5 -> 2 -> 3 -> 4 -> 1 
        Explanation: The 5th node from 1st is 5 and 5th node from last is 1, so swap them.
27. Rearrange a given linked list in-place.
    - Given a singly linked list L0 -> L1 -> … -> Ln-1 -> Ln. Rearrange the nodes in the list so that the new formed list is : L0 -> Ln -> L1 -> Ln-1 -> L2 -> Ln-2 … You are required to do this in place without altering the nodes’ values. 
    - Input:  1 -> 2 -> 3 -> 4
        Output: 1 -> 4 -> 2 -> 3

        Input:  1 -> 2 -> 3 -> 4 -> 5
        Output: 1 -> 5 -> 2 -> 4 -> 3
28. Clone a Linked List with next and Random Pointer
   - Given a linked list of size N where each node has two links: one pointer points to the next node and the second pointer points to any node in the list. The task is to create a clone of this linked list in O(N) time. 
    Note: The pointer pointing to the next node is ‘next‘ pointer and the one pointing to an arbitrary node is called ‘arbit’ pointer as it can point to any arbitrary node in the linked list.             
    - https://media.geeksforgeeks.org/wp-content/uploads/20220728174225/original.jpg
29. Flattening a Linked List
    - Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
        (i) a next pointer to the next node,
        (ii) a bottom pointer to a linked list where this node is head.
        Each of the sub-linked-list is in sorted order.
        Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
        Note: The flattened list will be printed using the bottom pointer instead of next pointer.

        Note: All linked lists are sorted and the resultant linked list should also be sorted
Input:    5 -> 10 -> 19 -> 28
        |        |         |        |
        V       V       V       V
        7      20      22     35
        |                 |        |
        V               V       V
        8               50     40
        |                          |
        V                           V
        30                       45

Output: 5->7->8->10->19->20->22->28->30->35->40->45->50

Input:    3 -> 10 -> 7 -> 14
               |        |         |        |
              V       V       V       V
              9      47      15     22
               |                 |        
              V                V      
              17              30

Output: 3->7->9->10->14->15->17->22->30->47   
30. Merge K sorted linked lists | Set 1
    - Given K sorted linked lists of size N each, the task is to merge them all maintaining their sorted order.

    Examples: 

    Input: K = 3, N =  4
    list1 = 1->3->5->7->NULL
    list2 = 2->4->6->8->NULL
    list3 = 0->9->10->11->NULL
    Output: 0->1->2->3->4->5->6->7->8->9->10->11
    Merged lists in a sorted order where every element is greater than the previous element.

    Input: K = 3, N =  3
    list1 = 1->3->7->NULL
    list2 = 2->4->8->NULL
    list3 = 9->10->11->NULL
    Output: 1->2->3->4->7->8->9->10->11
    Merged lists in a sorted order where every element is greater than the previous element.

